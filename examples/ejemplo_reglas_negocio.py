"""
Ejemplo de Reglas de Negocio - Ciencias Sociales
===============================================

Este script demuestra el sistema de validaci√≥n de reglas de negocio espec√≠ficas
para investigaciones en ciencias sociales.

Caracter√≠sticas demostradas:
1. Validaci√≥n de datos demogr√°ficos (edad, g√©nero, educaci√≥n, ingresos)
2. Validaci√≥n de escalas Likert y encuestas
3. Validaci√≥n de datos geogr√°ficos (regiones, comunas)
4. Validaciones de consistencia cruzada
5. Integraci√≥n con el sistema h√≠brido de errores
6. Logging detallado de validaciones
"""

import pandas as pd
import numpy as np
import sys
import os
from typing import Dict, Any

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from processing.business_rules import (
    validate_demographics, 
    validate_likert, 
    validate_geography, 
    validate_cross_consistency,
    validate_business_rules,
    validate_business_rules_decorator,
    BusinessRuleError
)
from processing.config_manager import ConfigManager
from processing.error_reporter import report_business_rule_error


def crear_datos_demograficos():
    """Crea datos demogr√°ficos de ejemplo con algunos problemas"""
    
    # Datos v√°lidos
    datos_validos = pd.DataFrame({
        'edad': [25, 30, 35, 40, 45, 50, 55, 60, 65, 70],
        'genero': ['Masculino', 'Femenino', 'Masculino', 'Femenino', 'Masculino', 
                  'Femenino', 'Masculino', 'Femenino', 'Masculino', 'Femenino'],
        'nivel_educacion': ['Primaria', 'Secundaria', 'Universitaria', 'Postgrado', 'Secundaria',
                           'Universitaria', 'Primaria', 'Secundaria', 'Universitaria', 'Postgrado'],
        'ingresos': [30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000],
        'region': ['Metropolitana', 'Valpara√≠so', 'Metropolitana', 'Valpara√≠so', 'Metropolitana',
                  'Valpara√≠so', 'Metropolitana', 'Valpara√≠so', 'Metropolitana', 'Valpara√≠so'],
        'comuna': ['Santiago', 'Valpara√≠so', 'Providencia', 'Vi√±a del Mar', 'Las Condes',
                  'Quilpu√©', '√ëu√±oa', 'Quillota', 'La Florida', 'Villa Alemana']
    })
    
    # Datos con problemas demogr√°ficos
    datos_problematicos = pd.DataFrame({
        'edad': [150, 30, -5, 40, 45, 50, 55, 60, 65, 70],  # Edades inv√°lidas
        'genero': ['Masculino', 'Femenino', 'Otro', 'Masculino', 'Femenino', 
                  'Masculino', 'Femenino', 'Masculino', 'Femenino', 'Masculino'],
        'nivel_educacion': ['Primaria', 'Secundaria', 'Universitaria', 'Postgrado', 'Secundaria',
                           'Universitaria', 'Primaria', 'Secundaria', 'Universitaria', 'Postgrado'],
        'ingresos': [30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000],
        'region': ['Metropolitana', 'Valpara√≠so', 'Metropolitana', 'Valpara√≠so', 'Metropolitana',
                  'Valpara√≠so', 'Metropolitana', 'Valpara√≠so', 'Metropolitana', 'Valpara√≠so'],
        'comuna': ['Santiago', 'Valpara√≠so', 'Providencia', 'Vi√±a del Mar', 'Las Condes',
                  'Quilpu√©', '√ëu√±oa', 'Quillota', 'La Florida', 'Villa Alemana']
    })
    
    # Datos con problemas de consistencia cruzada
    datos_inconsistentes = pd.DataFrame({
        'edad': [15, 30, 35, 40, 45, 50, 55, 60, 65, 70],
        'genero': ['Masculino', 'Femenino', 'Masculino', 'Femenino', 'Masculino', 
                  'Femenino', 'Masculino', 'Femenino', 'Masculino', 'Femenino'],
        'nivel_educacion': ['Universitaria', 'Secundaria', 'Universitaria', 'Postgrado', 'Secundaria',
                           'Universitaria', 'Primaria', 'Secundaria', 'Universitaria', 'Postgrado'],
        'ingresos': [30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000],
        'empleo': ['Empleado', 'Desempleado', 'Empleado', 'Jubilado', 'Empleado',
                  'Desempleado', 'Empleado', 'Jubilado', 'Empleado', 'Desempleado'],
        'ocupacion': ['Profesional', 'Desempleado', 'Profesional', 'Jubilado', 'Profesional',
                     'Desempleado', 'Profesional', 'Jubilado', 'Profesional', 'Desempleado'],
        'region': ['Metropolitana', 'Valpara√≠so', 'Metropolitana', 'Valpara√≠so', 'Metropolitana',
                  'Valpara√≠so', 'Metropolitana', 'Valpara√≠so', 'Metropolitana', 'Valpara√≠so'],
        'comuna': ['Santiago', 'Valpara√≠so', 'Providencia', 'Vi√±a del Mar', 'Las Condes',
                  'Quilpu√©', '√ëu√±oa', 'Quillota', 'La Florida', 'Villa Alemana']
    })
    
    return {
        'validos': datos_validos,
        'problematicos': datos_problematicos,
        'inconsistentes': datos_inconsistentes
    }


def crear_datos_likert():
    """Crea datos de escalas Likert de ejemplo"""
    
    # Datos de escala Likert 5 puntos
    datos_likert_5 = pd.DataFrame({
        'pregunta_1_likert': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
        'pregunta_2_likert': [2, 3, 4, 5, 1, 2, 3, 4, 5, 1],
        'pregunta_3_likert': [3, 4, 5, 1, 2, 3, 4, 5, 1, 2],
        'pregunta_4_likert': [4, 5, 1, 2, 3, 4, 5, 1, 2, 3],
        'pregunta_5_likert': [5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
    })
    
    # Datos de escala Likert con problemas
    datos_likert_problematico = pd.DataFrame({
        'pregunta_1_likert': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],  # Valores fuera de rango
        'pregunta_2_likert': [2, 3, 4, 5, 1, 2, 3, 4, 5, 1],
        'pregunta_3_likert': [3, 4, 5, 1, 2, 3, 4, 5, 1, 2],
        'pregunta_4_likert': [4, 5, 1, 2, 3, 4, 5, 1, 2, 3],
        'pregunta_5_likert': [5, 1, 2, 3, 4, 5, 1, 2, 3, 4]
    })
    
    # Datos de escala Likert con etiquetas
    datos_likert_etiquetas = pd.DataFrame({
        'pregunta_1_likert': ['Muy en desacuerdo', 'En desacuerdo', 'Neutral', 'De acuerdo', 'Muy de acuerdo',
                             'Muy en desacuerdo', 'En desacuerdo', 'Neutral', 'De acuerdo', 'Muy de acuerdo'],
        'pregunta_2_likert': ['En desacuerdo', 'Neutral', 'De acuerdo', 'Muy de acuerdo', 'Muy en desacuerdo',
                             'En desacuerdo', 'Neutral', 'De acuerdo', 'Muy de acuerdo', 'Muy en desacuerdo'],
        'pregunta_3_likert': ['Neutral', 'De acuerdo', 'Muy de acuerdo', 'Muy en desacuerdo', 'En desacuerdo',
                             'Neutral', 'De acuerdo', 'Muy de acuerdo', 'Muy en desacuerdo', 'En desacuerdo']
    })
    
    return {
        'likert_5': datos_likert_5,
        'likert_problematico': datos_likert_problematico,
        'likert_etiquetas': datos_likert_etiquetas
    }


def ejemplo_validacion_demografica():
    """Demuestra validaci√≥n de datos demogr√°ficos"""
    print("\n" + "="*60)
    print("EJEMPLO 1: VALIDACI√ìN DEMOGR√ÅFICA")
    print("="*60)
    
    datos = crear_datos_demograficos()
    
    # Validar datos v√°lidos
    print("üìä Validando datos demogr√°ficos v√°lidos...")
    try:
        result = validate_demographics(datos['validos'], {'dataset_type': 'demographic'})
        print(f"‚úÖ Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Validar datos problem√°ticos
    print("\nüìä Validando datos demogr√°ficos problem√°ticos...")
    try:
        result = validate_demographics(datos['problematicos'], {'dataset_type': 'demographic'})
        print(f"‚ö†Ô∏è Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def ejemplo_validacion_likert():
    """Demuestra validaci√≥n de escalas Likert"""
    print("\n" + "="*60)
    print("EJEMPLO 2: VALIDACI√ìN DE ESCALAS LIKERT")
    print("="*60)
    
    datos = crear_datos_likert()
    
    # Validar escala Likert 5 puntos
    print("üìä Validando escala Likert 5 puntos...")
    try:
        result = validate_likert(datos['likert_5'], 'pregunta_1_likert', '5_puntos')
        print(f"‚úÖ Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Validar escala Likert problem√°tica
    print("\nüìä Validando escala Likert problem√°tica...")
    try:
        result = validate_likert(datos['likert_problematico'], 'pregunta_1_likert', '5_puntos')
        print(f"‚ö†Ô∏è Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Validar escala Likert con etiquetas
    print("\nüìä Validando escala Likert con etiquetas...")
    try:
        result = validate_likert(datos['likert_etiquetas'], 'pregunta_1_likert', '5_puntos')
        print(f"‚úÖ Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def ejemplo_validacion_geografica():
    """Demuestra validaci√≥n de datos geogr√°ficos"""
    print("\n" + "="*60)
    print("EJEMPLO 3: VALIDACI√ìN GEOGR√ÅFICA")
    print("="*60)
    
    datos = crear_datos_demograficos()
    
    # Validar datos geogr√°ficos v√°lidos
    print("üìä Validando datos geogr√°ficos v√°lidos...")
    try:
        result = validate_geography(datos['validos'], 'region', 'comuna')
        print(f"‚úÖ Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Crear datos geogr√°ficos problem√°ticos
    datos_geo_problematico = pd.DataFrame({
        'region': ['Regi√≥n Inexistente', 'Valpara√≠so', 'Metropolitana'],
        'comuna': ['Comuna Inexistente', 'Valpara√≠so', 'Santiago']
    })
    
    print("\nüìä Validando datos geogr√°ficos problem√°ticos...")
    try:
        result = validate_geography(datos_geo_problematico, 'region', 'comuna')
        print(f"‚ö†Ô∏è Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def ejemplo_validacion_consistencia_cruzada():
    """Demuestra validaci√≥n de consistencia cruzada"""
    print("\n" + "="*60)
    print("EJEMPLO 4: VALIDACI√ìN DE CONSISTENCIA CRUZADA")
    print("="*60)
    
    datos = crear_datos_demograficos()
    
    # Validar consistencia cruzada en datos v√°lidos
    print("üìä Validando consistencia cruzada en datos v√°lidos...")
    try:
        result = validate_cross_consistency(datos['validos'], {'dataset_type': 'demographic'})
        print(f"‚úÖ Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Validar consistencia cruzada en datos inconsistentes
    print("\nüìä Validando consistencia cruzada en datos inconsistentes...")
    try:
        result = validate_cross_consistency(datos['inconsistentes'], {'dataset_type': 'demographic'})
        print(f"‚ö†Ô∏è Resultado: {result.message}")
        print(f"   V√°lido: {result.is_valid}")
        print(f"   Detalles: {result.details}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def ejemplo_validacion_completa():
    """Demuestra validaci√≥n completa de reglas de negocio"""
    print("\n" + "="*60)
    print("EJEMPLO 5: VALIDACI√ìN COMPLETA DE REGLAS DE NEGOCIO")
    print("="*60)
    
    datos = crear_datos_demograficos()
    
    # Validaci√≥n completa en datos v√°lidos
    print("üìä Validaci√≥n completa en datos v√°lidos...")
    try:
        results = validate_business_rules(datos['validos'], {'dataset_type': 'demographic'})
        print(f"‚úÖ Validaci√≥n completa completada: {len(results)} reglas ejecutadas")
        for i, result in enumerate(results, 1):
            print(f"   Regla {i} ({result.rule_name}): {result.is_valid}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Validaci√≥n completa en datos problem√°ticos
    print("\nüìä Validaci√≥n completa en datos problem√°ticos...")
    try:
        results = validate_business_rules(datos['problematicos'], {'dataset_type': 'demographic'})
        print(f"‚ö†Ô∏è Validaci√≥n completa completada: {len(results)} reglas ejecutadas")
        for i, result in enumerate(results, 1):
            print(f"   Regla {i} ({result.rule_name}): {result.is_valid}")
            if not result.is_valid:
                print(f"      Error: {result.message}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def ejemplo_decorador_reglas_negocio():
    """Demuestra el uso del decorador de reglas de negocio"""
    print("\n" + "="*60)
    print("EJEMPLO 6: DECORADOR DE REGLAS DE NEGOCIO")
    print("="*60)
    
    @validate_business_rules_decorator
    def procesar_datos_demograficos(df: pd.DataFrame, metadata: dict[str, Any]) -> pd.DataFrame:
        """Funci√≥n de ejemplo que procesa datos demogr√°ficos"""
        print(f"üîÑ Procesando {len(df)} registros demogr√°ficos...")
        # Simular procesamiento
        return df.copy()
    
    datos = crear_datos_demograficos()
    
    # Procesar datos v√°lidos
    print("üìä Procesando datos v√°lidos con decorador...")
    try:
        result_df = procesar_datos_demograficos(datos['validos'], metadata={'dataset_type': 'demographic'})
        print(f"‚úÖ Procesamiento completado: {len(result_df)} registros")
    except Exception as e:
        print(f"‚ùå Error en procesamiento: {e}")
    
    # Procesar datos problem√°ticos (deber√≠a fallar)
    print("\nüìä Procesando datos problem√°ticos con decorador...")
    try:
        result_df = procesar_datos_demograficos(datos['problematicos'], metadata={'dataset_type': 'demographic'})
        print(f"‚úÖ Procesamiento completado: {len(result_df)} registros")
    except Exception as e:
        print(f"‚ùå Error en procesamiento: {e}")


def mostrar_resumen_sistema():
    """Muestra un resumen del sistema de reglas de negocio"""
    print("\n" + "="*60)
    print("RESUMEN DEL SISTEMA DE REGLAS DE NEGOCIO")
    print("="*60)
    
    print("‚úÖ CARACTER√çSTICAS IMPLEMENTADAS:")
    print("   ‚Ä¢ Validaci√≥n de datos demogr√°ficos (edad, g√©nero, educaci√≥n, ingresos)")
    print("   ‚Ä¢ Validaci√≥n de escalas Likert y encuestas")
    print("   ‚Ä¢ Validaci√≥n de datos geogr√°ficos (regiones, comunas)")
    print("   ‚Ä¢ Validaciones de consistencia cruzada")
    print("   ‚Ä¢ Integraci√≥n con sistema h√≠brido de errores")
    print("   ‚Ä¢ Logging detallado de validaciones")
    print("   ‚Ä¢ Decorador @validate_business_rules_decorator")
    
    print("\n‚úÖ TIPOS DE VALIDACI√ìN:")
    print("   ‚Ä¢ validate_demographics() - Validaci√≥n de variables demogr√°ficas")
    print("   ‚Ä¢ validate_likert() - Validaci√≥n de escalas de encuesta")
    print("   ‚Ä¢ validate_geography() - Validaci√≥n de datos geogr√°ficos")
    print("   ‚Ä¢ validate_cross_consistency() - Validaci√≥n de consistencia cruzada")
    print("   ‚Ä¢ validate_business_rules() - Validaci√≥n completa autom√°tica")
    
    print("\n‚úÖ REGLAS DE NEGOCIO IMPLEMENTADAS:")
    print("   ‚Ä¢ Edad en rango [0, 120]")
    print("   ‚Ä¢ G√©nero con valores v√°lidos")
    print("   ‚Ä¢ Nivel de educaci√≥n mapeado a categor√≠as predefinidas")
    print("   ‚Ä¢ Ingresos ‚â• 0 con detecci√≥n de outliers")
    print("   ‚Ä¢ Escalas Likert con valores en rango v√°lido")
    print("   ‚Ä¢ Consistencia regi√≥n-comuna")
    print("   ‚Ä¢ Edad vs educaci√≥n (menores de 18 con educaci√≥n universitaria)")
    print("   ‚Ä¢ Edad vs empleo (jubilados menores de 60)")
    print("   ‚Ä¢ Ingresos vs ocupaci√≥n (desempleados con ingresos altos)")
    
    print("\n‚úÖ INTEGRACI√ìN CON SISTEMA DE ERRORES:")
    print("   ‚Ä¢ BusinessRuleError para errores espec√≠ficos")
    print("   ‚Ä¢ ValidationResult con detalles completos")
    print("   ‚Ä¢ Logging autom√°tico de todas las validaciones")
    print("   ‚Ä¢ Reporte h√≠brido de errores (Streamlit + logging)")
    print("   ‚Ä¢ Detenci√≥n autom√°tica de la app en errores cr√≠ticos")


def main():
    """Funci√≥n principal que ejecuta todos los ejemplos"""
    print("üöÄ SISTEMA DE REGLAS DE NEGOCIO - CIENCIAS SOCIALES")
    print("="*60)
    
    # Configurar el sistema
    try:
        config = ConfigManager()
        print(f"‚úÖ Configuraci√≥n cargada: {config.get('app_name', 'N/A')}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al cargar configuraci√≥n: {e}")
    
    # Ejecutar ejemplos
    ejemplo_validacion_demografica()
    ejemplo_validacion_likert()
    ejemplo_validacion_geografica()
    ejemplo_validacion_consistencia_cruzada()
    ejemplo_validacion_completa()
    ejemplo_decorador_reglas_negocio()
    
    # Mostrar resumen
    mostrar_resumen_sistema()
    
    print("\n" + "="*60)
    print("üéâ TODOS LOS EJEMPLOS COMPLETADOS")
    print("="*60)
    print("El sistema de reglas de negocio est√° funcionando correctamente.")
    print("Las validaciones se aplican autom√°ticamente seg√∫n el tipo de datos.")
    print("Los errores se reportan de forma h√≠brida y detienen la app cuando es necesario.")


if __name__ == "__main__":
    main() 