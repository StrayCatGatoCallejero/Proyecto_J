#!/usr/bin/env python3
"""
üé® PROYECTO J - PRUEBAS DEL NUEVO DISE√ëO VISUAL
==================================================

Script para verificar que el nuevo dise√±o visual est√° correctamente implementado:
- Fondo azul claro (#C7DCE5) en el √°rea de contenido principal
- Fondo oscuro (#333333) en el panel lateral izquierdo
- Fondo general claro (#FBF7F2) en toda la aplicaci√≥n
"""

import os
import re
import sys
from pathlib import Path


def verificar_configuracion_tema():
    """Verificar que la configuraci√≥n del tema en .streamlit/config.toml es correcta."""
    print("üîç Verificando configuraci√≥n del tema...")

    config_path = Path(".streamlit/config.toml")
    if not config_path.exists():
        print("‚ùå Archivo .streamlit/config.toml no encontrado")
        return False

    with open(config_path, "r", encoding="utf-8") as f:
        content = f.read()

    # Verificar configuraciones requeridas
    required_configs = [
        'base = "light"',
        'primaryColor = "#648DA5"',
        'backgroundColor = "#FBF7F2"',
        'secondaryBackgroundColor = "#F5E3D3"',
        'textColor = "#333333"',
        'font = "sans serif"',
    ]

    for config in required_configs:
        if config not in content:
            print(f"‚ùå Configuraci√≥n faltante: {config}")
            return False

    print("‚úÖ Configuraci√≥n del tema correcta")
    return True


def verificar_css_app_encuestas():
    """Verificar que app_encuestas.py tiene el CSS correcto para el nuevo dise√±o."""
    print("\nüé® Verificando CSS en app_encuestas.py...")

    if not os.path.exists("app_encuestas.py"):
        print("‚ùå Archivo app_encuestas.py no encontrado")
        return False

    with open("app_encuestas.py", "r", encoding="utf-8") as f:
        content = f.read()

    # Verificar elementos CSS requeridos
    css_checks = [
        ("color-scheme: light !important", "Forzar modo claro"),
        ("--color-azul-claro: #C7DCE5", "Variable azul claro"),
        (
            "background-color: var(--color-azul-claro) !important",
            "√Årea de contenido azul claro",
        ),
        ("background-color: #333333 !important", "Sidebar fondo oscuro"),
        ("color: #FFFFFF !important", "Texto blanco en sidebar"),
        ("color: #CCCCCC !important", "Texto gris en sidebar"),
        ("border-radius: 10px", "Border radius en √°rea de contenido"),
        ("box-shadow: 0 2px 8px", "Sombra en √°rea de contenido"),
    ]

    all_passed = True
    for css_pattern, description in css_checks:
        if css_pattern not in content:
            print(f"‚ùå CSS faltante: {description}")
            all_passed = False
        else:
            print(f"‚úÖ {description}")

    return all_passed


def verificar_css_app_front():
    """Verificar que app_front.py tiene el CSS correcto para el nuevo dise√±o."""
    print("\nüé® Verificando CSS en app_front.py...")

    if not os.path.exists("app_front.py"):
        print("‚ùå Archivo app_front.py no encontrado")
        return False

    with open("app_front.py", "r", encoding="utf-8") as f:
        content = f.read()

    # Verificar elementos CSS requeridos
    css_checks = [
        ("color-scheme: light !important", "Forzar modo claro"),
        ("--color-azul-claro: #C7DCE5", "Variable azul claro"),
        ("background-color: var(--color-azul-claro)", "√Årea de contenido azul claro"),
        ("background-color: #333333 !important", "Sidebar fondo oscuro"),
        ("color: #FFFFFF !important", "Texto blanco en sidebar"),
        ("color: #CCCCCC !important", "Texto gris en sidebar"),
    ]

    all_passed = True
    for css_pattern, description in css_checks:
        if css_pattern not in content:
            print(f"‚ùå CSS faltante: {description}")
            all_passed = False
        else:
            print(f"‚úÖ {description}")

    return all_passed


def verificar_documentacion():
    """Verificar que la documentaci√≥n del tema est√° actualizada."""
    print("\nüìö Verificando documentaci√≥n del tema...")

    if not os.path.exists("TEMA_FIJO.md"):
        print("‚ùå Archivo TEMA_FIJO.md no encontrado")
        return False

    with open("TEMA_FIJO.md", "r", encoding="utf-8") as f:
        content = f.read()

    # Verificar elementos de documentaci√≥n
    doc_checks = [
        ("#C7DCE5", "Azul claro en documentaci√≥n"),
        ("#333333", "Fondo oscuro en documentaci√≥n"),
        ("azul claro en el √°rea de contenido", "Descripci√≥n del dise√±o"),
        ("fondo oscuro en el sidebar", "Descripci√≥n del sidebar"),
    ]

    all_passed = True
    for doc_pattern, description in doc_checks:
        if doc_pattern.lower() not in content.lower():
            print(f"‚ùå Documentaci√≥n faltante: {description}")
            all_passed = False
        else:
            print(f"‚úÖ {description}")

    return all_passed


def main():
    """Funci√≥n principal de verificaci√≥n."""
    print("üéØ PROYECTO J - PRUEBAS DEL NUEVO DISE√ëO VISUAL")
    print("=" * 60)

    tests = [
        ("Configuraci√≥n del tema", verificar_configuracion_tema),
        ("CSS en app_encuestas.py", verificar_css_app_encuestas),
        ("CSS en app_front.py", verificar_css_app_front),
        ("Documentaci√≥n del tema", verificar_documentacion),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüîç Ejecutando: {test_name}")
        print("-" * 40)

        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PAS√ì")
            else:
                print(f"‚ùå {test_name}: FALL√ì")
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")

    print("\n" + "=" * 60)
    print(f"üéØ Resultado: {passed}/{total} pruebas pasaron")

    if passed == total:
        print(
            "üéâ ¬°Todas las pruebas pasaron! El nuevo dise√±o est√° correctamente implementado."
        )
        print("\nüé® Caracter√≠sticas verificadas:")
        print("   ‚úÖ Fondo azul claro (#C7DCE5) en √°rea de contenido")
        print("   ‚úÖ Fondo oscuro (#333333) en panel lateral")
        print("   ‚úÖ Fondo general claro (#FBF7F2)")
        print("   ‚úÖ Modo claro forzado")
        print("   ‚úÖ CSS consistente en todas las aplicaciones")
        print("   ‚úÖ Documentaci√≥n actualizada")
        return 0
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisar la implementaci√≥n.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
