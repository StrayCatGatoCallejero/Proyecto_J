#!/usr/bin/env python3
"""
Test script for the advanced statistical analysis app functions.
This script tests the core functions without running the Streamlit interface.
"""

import pandas as pd
import numpy as np
import sys
import os

# Add the current directory to the path to import the app functions
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import functions from the app
from app_estadistica_avanzada import (
    detectar_tipos_columnas,
    calcular_correlacion,
    crear_tabla_contingencia,
    aplicar_filtros
)

def crear_datos_ejemplo():
    """Crea un DataFrame de ejemplo para las pruebas."""
    np.random.seed(42)
    
    # Datos num√©ricos
    n = 1000
    edad = np.random.normal(35, 10, n)
    ingresos = np.random.lognormal(10, 0.5, n)
    educacion = np.random.poisson(12, n)
    
    # Datos categ√≥ricos
    genero = np.random.choice(['Masculino', 'Femenino', 'No binario'], n, p=[0.48, 0.48, 0.04])
    region = np.random.choice(['Norte', 'Sur', 'Este', 'Oeste'], n)
    empleo = np.random.choice(['Empleado', 'Desempleado', 'Estudiante', 'Jubilado'], n, p=[0.6, 0.1, 0.2, 0.1])
    
    # Crear DataFrame
    df = pd.DataFrame({
        'edad': edad,
        'ingresos': ingresos,
        'educacion': educacion,
        'genero': genero,
        'region': region,
        'empleo': empleo
    })
    
    return df

def test_deteccion_tipos():
    """Prueba la funci√≥n de detecci√≥n de tipos de columnas."""
    print("üß™ Probando detecci√≥n de tipos de columnas...")
    
    df = crear_datos_ejemplo()
    tipos_df = detectar_tipos_columnas(df)
    
    # Convertir a diccionario para facilitar las verificaciones
    tipos = dict(zip(tipos_df['columna'], tipos_df['tipo_detectado']))
    
    # Verificar que se detectaron los tipos correctos
    assert 'num√©rico' in tipos['edad'], f"Edad deber√≠a ser num√©rico, pero es {tipos['edad']}"
    assert tipos['genero'] == 'categ√≥rico', f"G√©nero deber√≠a ser categ√≥rico, pero es {tipos['genero']}"
    
    print(f"‚úÖ Tipos detectados: {tipos}")
    return True

def test_correlacion():
    """Prueba la funci√≥n de c√°lculo de correlaci√≥n."""
    print("üß™ Probando c√°lculo de correlaci√≥n...")
    
    df = crear_datos_ejemplo()
    variables = ['edad', 'ingresos', 'educacion']
    
    # Probar correlaci√≥n Pearson
    corr_pearson, error = calcular_correlacion(df, variables, 'pearson')
    assert error is None, f"Error en correlaci√≥n Pearson: {error}"
    assert corr_pearson.shape == (3, 3), f"Matriz de correlaci√≥n deber√≠a ser 3x3, pero es {corr_pearson.shape}"
    
    # Probar correlaci√≥n Spearman
    corr_spearman, error = calcular_correlacion(df, variables, 'spearman')
    assert error is None, f"Error en correlaci√≥n Spearman: {error}"
    
    print(f"‚úÖ Correlaci√≥n Pearson calculada: {corr_pearson.shape}")
    print(f"‚úÖ Correlaci√≥n Spearman calculada: {corr_spearman.shape}")
    return True

def test_tabla_contingencia():
    """Prueba la funci√≥n de tabla de contingencia."""
    print("üß™ Probando tabla de contingencia...")
    
    df = crear_datos_ejemplo()
    resultados = crear_tabla_contingencia(df, 'genero', 'empleo')
    
    assert resultados is not None, "La tabla de contingencia no deber√≠a ser None"
    assert 'tabla' in resultados, "Deber√≠a contener la tabla"
    assert 'chi2' in resultados, "Deber√≠a contener el estad√≠stico chi2"
    assert 'p_value' in resultados, "Deber√≠a contener el p-valor"
    assert 'interpretacion' in resultados, "Deber√≠a contener la interpretaci√≥n"
    
    print(f"‚úÖ Tabla de contingencia creada")
    print(f"   Chi2: {resultados['chi2']:.4f}")
    print(f"   p-valor: {resultados['p_value']:.4f}")
    print(f"   Interpretaci√≥n: {resultados['interpretacion']}")
    return True

def test_filtros():
    """Prueba la funci√≥n de aplicaci√≥n de filtros."""
    print("üß™ Probando aplicaci√≥n de filtros...")
    
    df = crear_datos_ejemplo()
    
    # Definir filtros
    filtros = {
        'edad': {
            'tipo': 'rango',
            'valores': [25, 45]
        },
        'genero': {
            'tipo': 'categorias',
            'valores': ['Masculino', 'Femenino']
        }
    }
    
    # Aplicar filtros
    df_filtrado = aplicar_filtros(df, filtros)
    
    # Verificar que los filtros se aplicaron correctamente
    assert len(df_filtrado) <= len(df), "Los datos filtrados no deber√≠an ser m√°s que los originales"
    assert all(df_filtrado['edad'] >= 25), "Todas las edades deber√≠an ser >= 25"
    assert all(df_filtrado['edad'] <= 45), "Todas las edades deber√≠an ser <= 45"
    assert all(df_filtrado['genero'].isin(['Masculino', 'Femenino'])), "Solo deber√≠an estar los g√©neros seleccionados"
    
    print(f"‚úÖ Filtros aplicados: {len(df_filtrado)} registros de {len(df)} originales")
    return True

def test_datos_ejemplo():
    """Prueba la creaci√≥n de datos de ejemplo."""
    print("üß™ Probando creaci√≥n de datos de ejemplo...")
    
    df = crear_datos_ejemplo()
    
    # Verificar estructura
    assert len(df) == 1000, f"Deber√≠a tener 1000 filas, pero tiene {len(df)}"
    assert len(df.columns) == 6, f"Deber√≠a tener 6 columnas, pero tiene {len(df.columns)}"
    
    # Verificar tipos de datos
    assert df['edad'].dtype in ['float64', 'float32'], "Edad deber√≠a ser num√©rico"
    assert df['genero'].dtype == 'object', "G√©nero deber√≠a ser objeto (categ√≥rico)"
    
    # Verificar que no hay valores nulos
    assert df.isnull().sum().sum() == 0, "No deber√≠a haber valores nulos"
    
    print(f"‚úÖ Datos de ejemplo creados: {df.shape}")
    print(f"   Columnas: {list(df.columns)}")
    return True

def ejecutar_todas_las_pruebas():
    """Ejecuta todas las pruebas y reporta resultados."""
    print("üöÄ Iniciando pruebas del m√≥dulo de an√°lisis estad√≠stico avanzado...")
    print("=" * 60)
    
    pruebas = [
        ("Datos de ejemplo", test_datos_ejemplo),
        ("Detecci√≥n de tipos", test_deteccion_tipos),
        ("C√°lculo de correlaci√≥n", test_correlacion),
        ("Tabla de contingencia", test_tabla_contingencia),
        ("Aplicaci√≥n de filtros", test_filtros),
    ]
    
    resultados = []
    
    for nombre, prueba in pruebas:
        try:
            resultado = prueba()
            resultados.append((nombre, True, None))
            print(f"‚úÖ {nombre}: PAS√ì")
        except Exception as e:
            resultados.append((nombre, False, str(e)))
            print(f"‚ùå {nombre}: FALL√ì - {e}")
        print("-" * 40)
    
    # Resumen final
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    exitos = sum(1 for _, paso, _ in resultados if paso)
    total = len(resultados)
    
    for nombre, paso, error in resultados:
        estado = "‚úÖ PAS√ì" if paso else f"‚ùå FALL√ì ({error})"
        print(f"{nombre}: {estado}")
    
    print(f"\nüéØ Resultado final: {exitos}/{total} pruebas exitosas")
    
    if exitos == total:
        print("üéâ ¬°Todas las pruebas pasaron! El m√≥dulo est√° funcionando correctamente.")
        return True
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores arriba.")
        return False

if __name__ == "__main__":
    try:
        exito = ejecutar_todas_las_pruebas()
        sys.exit(0 if exito else 1)
    except Exception as e:
        print(f"‚ùå Error general en las pruebas: {e}")
        sys.exit(1) 