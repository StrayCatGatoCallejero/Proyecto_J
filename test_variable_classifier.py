#!/usr/bin/env python3
"""
Script para probar la nueva funcionalidad de clasificaci√≥n de variables.
"""

import sys
import os
import pandas as pd
import numpy as np
from pathlib import Path

def test_variable_classifier():
    """Prueba la clasificaci√≥n de variables con datos de ejemplo."""
    
    # Agregar el directorio ra√≠z al path
    project_root = Path(__file__).parent.absolute()
    sys.path.insert(0, str(project_root))
    
    print("üîç Probando clasificaci√≥n de variables...")
    
    try:
        # Importar la nueva funcionalidad
        from proyecto_j.src.ciencias_sociales import clasificar_variables_avanzado, VariableClassifier
        
        # Crear datos de ejemplo
        print("üìä Creando datos de ejemplo...")
        
        # Datos de ejemplo con diferentes tipos de variables
        data = {
            'edad': [25, 30, 35, 40, 45, 50, 55, 60, 65, 70],
            'genero': ['M', 'F', 'M', 'F', 'M', 'F', 'M', 'F', 'M', 'F'],
            'nivel_educacion': [1, 2, 3, 2, 1, 3, 2, 1, 3, 2],  # Ordinal
            'satisfaccion': [5, 4, 3, 5, 4, 3, 5, 4, 3, 5],  # Likert
            'ingreso': [50000, 60000, 70000, 55000, 65000, 75000, 45000, 55000, 65000, 75000],
            'fecha_nacimiento': pd.date_range('1980-01-01', periods=10, freq='Y'),
            'comentarios': ['Bueno', 'Excelente', 'Regular', 'Muy bueno', 'Bueno', 'Excelente', 'Regular', 'Muy bueno', 'Bueno', 'Excelente'],
            'activo': [True, False, True, False, True, False, True, False, True, False]
        }
        
        df = pd.DataFrame(data)
        
        # Probar clasificaci√≥n
        print("üîç Ejecutando clasificaci√≥n de variables...")
        metadata = clasificar_variables_avanzado(df)
        
        # Mostrar resultados
        print("\nüìã Resultados de la clasificaci√≥n:")
        print("=" * 50)
        
        for col, meta in metadata.items():
            print(f"\nüîπ Variable: {col}")
            print(f"   Tipo: {meta['type']}")
            print(f"   Dominio: {meta['dominio']}")
            print(f"   Es ordinal: {meta.get('es_ordinal', False)}")
            print(f"   Es binaria: {meta.get('es_binaria', False)}")
            print(f"   Es Likert: {meta.get('es_likert', False)}")
            print(f"   Valores √∫nicos: {meta['n_unique']}")
            print(f"   Valores faltantes: {meta['n_missing']}")
        
        # Probar clasificador directo
        print("\nüîß Probando VariableClassifier directamente...")
        clf = VariableClassifier(cat_threshold=0.1, cat_unique_limit=20)
        metadata2 = clf.classify_dataset(df)
        
        print(f"‚úÖ Clasificaci√≥n exitosa: {len(metadata2)} variables procesadas")
        
        # Verificar que los resultados son consistentes
        if metadata == metadata2:
            print("‚úÖ Resultados consistentes entre funciones")
        else:
            print("‚ùå Inconsistencia en resultados")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_variable_classifier()
    if success:
        print("\nüéâ ¬°Prueba de clasificaci√≥n de variables exitosa!")
    else:
        print("\n‚ùå Prueba de clasificaci√≥n de variables fall√≥")
        sys.exit(1) 