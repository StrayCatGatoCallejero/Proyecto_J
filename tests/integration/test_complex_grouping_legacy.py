"""
Script de prueba para el sistema de agrupaci√≥n compleja
======================================================

Prueba las funcionalidades de agrupaci√≥n compleja con datos sint√©ticos.

TEMPORALMENTE COMENTADO - Requiere m√≥dulo complex_grouping que no est√° disponible
"""

# import pandas as pd
# import numpy as np
# from datetime import datetime, timedelta
# import sys
# import os

# # Agregar el directorio del proyecto al path
# sys.path.append(os.path.join(os.path.dirname(__file__), 'proyecto_j', 'src'))

# try:
#     from complex_grouping import ComplexGrouping, detect_complex_grouping_in_question, execute_complex_grouping_from_question
#     print("‚úÖ M√≥dulo de agrupaci√≥n compleja importado correctamente")
# except ImportError as e:
#     print(f"‚ùå Error importando m√≥dulo: {e}")
#     sys.exit(1)

# def crear_datos_sinteticos():
#     """Crea datos sint√©ticos para las pruebas."""
#     np.random.seed(42)
#     
#     # Crear fechas
#     fechas = pd.date_range(start='2024-01-01', end='2024-12-31', freq='D')
#     
#     # Crear datos sint√©ticos
#     n_registros = len(fechas)
#     
#     datos = {
#         'fecha': fechas,
#         'region': np.random.choice(['Norte', 'Sur', 'Este', 'Oeste'], n_registros),
#         'ciudad': np.random.choice(['Ciudad A', 'Ciudad B', 'Ciudad C', 'Ciudad D'], n_registros),
#         'categoria': np.random.choice(['Alto', 'Medio', 'Bajo'], n_registros),
#         'ventas': np.random.randint(100, 1000, n_registros),
#         'ingresos': np.random.uniform(1000, 5000, n_registros),
#         'clientes': np.random.randint(10, 100, n_registros),
#         'temperatura': np.random.uniform(15, 30, n_registros)
#     }
#     
#     df = pd.DataFrame(datos)
#     return df

def probar_deteccion_agrupacion():
    """Prueba la detecci√≥n de agrupaciones complejas."""
    print("\nüîç Probando detecci√≥n de agrupaciones complejas...")
    
    df = crear_datos_sinteticos()
    grouping_system = ComplexGrouping(df)
    
    # Casos de prueba
    casos_prueba = [
        "calcular promedio de ventas por regi√≥n",
        "contar registros agrupados por ciudad y categor√≠a",
        "suma de ingresos por regi√≥n y mes",
        "promedio de temperatura por ciudad en los √∫ltimos 30 d√≠as",
        "distribuci√≥n de ventas por nivel jer√°rquico de regi√≥n y ciudad",
        "promedio m√≥vil de ingresos por ventana de 7 d√≠as"
    ]
    
    for i, pregunta in enumerate(casos_prueba, 1):
        print(f"\nüìù Caso {i}: {pregunta}")
        
        try:
            params = grouping_system.detect_complex_grouping(pregunta)
            print(f"   Tipo: {params['type']}")
            print(f"   Variables: {params['variables']}")
            print(f"   Operaciones: {params['operations']}")
            print(f"   Jer√°rquico: {params['hierarchical']}")
            print(f"   Rolling: {params['rolling']}")
            print(f"   Transformaciones: {params['transformations']}")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def probar_ejecucion_agrupacion():
    """Prueba la ejecuci√≥n de agrupaciones complejas."""
    print("\n‚öôÔ∏è Probando ejecuci√≥n de agrupaciones complejas...")
    
    df = crear_datos_sinteticos()
    
    # Casos de prueba
    casos_prueba = [
        ("promedio de ventas por regi√≥n", ['ventas']),
        ("contar registros por ciudad y categor√≠a", None),
        ("suma de ingresos por regi√≥n", ['ingresos']),
        ("promedio de temperatura por ciudad", ['temperatura'])
    ]
    
    for i, (pregunta, target_vars) in enumerate(casos_prueba, 1):
        print(f"\nüìä Caso {i}: {pregunta}")
        
        try:
            result, insights = execute_complex_grouping_from_question(pregunta, df, target_vars)
            
            if not result.empty:
                print(f"   ‚úÖ Resultado obtenido: {len(result)} filas")
                print(f"   Columnas: {list(result.columns)}")
                print(f"   Primeras filas:")
                print(result.head(3).to_string())
                print(f"   Insights: {insights[:100]}...")
            else:
                print(f"   ‚ö†Ô∏è No se obtuvieron resultados")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def probar_agrupacion_jerarquica():
    """Prueba agrupaci√≥n jer√°rquica espec√≠fica."""
    print("\nüèóÔ∏è Probando agrupaci√≥n jer√°rquica...")
    
    df = crear_datos_sinteticos()
    grouping_system = ComplexGrouping(df)
    
    pregunta = "calcular promedio de ventas por regi√≥n y ciudad con an√°lisis jer√°rquico"
    
    try:
        params = grouping_system.detect_complex_grouping(pregunta)
        print(f"Par√°metros detectados: {params}")
        
        result = grouping_system.execute_complex_grouping(params, ['ventas'])
        
        if not result.empty:
            print(f"‚úÖ Agrupaci√≥n jer√°rquica exitosa: {len(result)} filas")
            if 'nivel_jerarquico' in result.columns:
                print("‚úÖ Columna de nivel jer√°rquico creada")
                print(result[['region', 'ciudad', 'nivel_jerarquico', 'ventas_mean']].head())
        else:
            print("‚ö†Ô∏è No se obtuvieron resultados")
            
    except Exception as e:
        print(f"‚ùå Error en agrupaci√≥n jer√°rquica: {e}")

def probar_agrupacion_temporal():
    """Prueba agrupaci√≥n temporal."""
    print("\nüìÖ Probando agrupaci√≥n temporal...")
    
    df = crear_datos_sinteticos()
    grouping_system = ComplexGrouping(df)
    
    pregunta = "calcular promedio de ventas por mes"
    
    try:
        params = grouping_system.detect_complex_grouping(pregunta)
        print(f"Par√°metros detectados: {params}")
        
        result = grouping_system.execute_complex_grouping(params, ['ventas'])
        
        if not result.empty:
            print(f"‚úÖ Agrupaci√≥n temporal exitosa: {len(result)} filas")
            print(result.head())
        else:
            print("‚ö†Ô∏è No se obtuvieron resultados")
            
    except Exception as e:
        print(f"‚ùå Error en agrupaci√≥n temporal: {e}")

def probar_transformaciones():
    """Prueba transformaciones personalizadas."""
    print("\nüîÑ Probando transformaciones personalizadas...")
    
    df = crear_datos_sinteticos()
    grouping_system = ComplexGrouping(df)
    
    pregunta = "calcular porcentaje de ventas por regi√≥n"
    
    try:
        params = grouping_system.detect_complex_grouping(pregunta)
        print(f"Par√°metros detectados: {params}")
        
        result = grouping_system.execute_complex_grouping(params, ['ventas'])
        
        if not result.empty:
            print(f"‚úÖ Transformaciones aplicadas: {len(result)} filas")
            print("Columnas resultantes:", list(result.columns))
            if any('porcentaje' in col for col in result.columns):
                print("‚úÖ Columna de porcentaje creada")
                print(result.head())
        else:
            print("‚ö†Ô∏è No se obtuvieron resultados")
            
    except Exception as e:
        print(f"‚ùå Error en transformaciones: {e}")

def main():
    """Funci√≥n principal de pruebas."""
    print("üöÄ Iniciando pruebas del sistema de agrupaci√≥n compleja")
    print("=" * 60)
    
    # Crear datos de prueba
    print("üìä Creando datos sint√©ticos...")
    df = crear_datos_sinteticos()
    print(f"‚úÖ Datos creados: {len(df)} registros, {len(df.columns)} columnas")
    print(f"Columnas: {list(df.columns)}")
    
    # Ejecutar pruebas
    probar_deteccion_agrupacion()
    probar_ejecucion_agrupacion()
    probar_agrupacion_jerarquica()
    probar_agrupacion_temporal()
    probar_transformaciones()
    
    print("\n" + "=" * 60)
    print("‚úÖ Pruebas completadas")

if __name__ == "__main__":
    main() 